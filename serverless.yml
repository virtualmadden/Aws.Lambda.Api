service: serverless-cars-api

provider:
  name: aws
  stage: beta
  region: us-west-2
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
package:
  individually: true
  exclude:
    - ./**
functions:
  create:
    handler: src/cars/create.handler
    package:
      include:
        - src/cars/create.js
    events:
      - http:
          path: car
          method: post
          cors: true
  list:
    handler: src/cars/list.handler
    package:
      include:
        - src/cars/list.js
    events:
      - http:
          path: cars
          method: get
          cors: true
  get:
    handler: src/cars/get.handler
    package:
      include:
        - src/cars/get.js
    events:
      - http:
          path: car/{id}
          method: get
          cors: true
  update:
    handler: src/cars/update.handler
    package:
      include:
        - src/cars/update.js
    events:
      - http:
          path: car/{id}
          method: put
          cors: true
  delete:
    handler: src/cars/delete.handler
    package:
      include:
        - src/cars/delete.js
    events:
      - http:
          path: car/{id}
          method: delete
          cors: true
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}